#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AssetRegistry

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class AssetRegistry.AssetRegistryImpl
// 0x0750 (0x0778 - 0x0028)
class UAssetRegistryImpl final  : public UObject
{
public:
	uint8                                         Pad_1400[0x750];                                   // 0x0028(0x0750)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetRegistryImpl">();
	}
	static class UAssetRegistryImpl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetRegistryImpl>();
	}
};

// Class AssetRegistry.AssetRegistryHelpers
// 0x0000 (0x0028 - 0x0028)
class UAssetRegistryHelpers final  : public UObject
{
public:
	static struct FAssetData CreateAssetData(class UObject* InAsset, bool bAllowBlueprintClass);
	static class UObject* GetAsset(struct FAssetData& InAssetData);
	static TScriptInterface<class IAssetRegistry> GetAssetRegistry();
	static class UClass* GetClass(struct FAssetData& InAssetData);
	static class FString GetExportTextName(struct FAssetData& InAssetData);
	static class FString GetFullName(struct FAssetData& InAssetData);
	static bool GetTagValue(struct FAssetData& InAssetData, class FName& InTagName, class FString* OutTagValue);
	static bool IsAssetLoaded(struct FAssetData& InAssetData);
	static bool IsRedirector(struct FAssetData& InAssetData);
	static bool IsUAsset(struct FAssetData& InAssetData);
	static bool IsValid(struct FAssetData& InAssetData);
	static struct FARFilter SetFilterTagsAndValues(struct FARFilter& InFilter, TArray<struct FTagAndValue>& InTagsAndValues);
	static struct FSoftObjectPath ToSoftObjectPath(struct FAssetData& InAssetData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetRegistryHelpers">();
	}
	static class UAssetRegistryHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetRegistryHelpers>();
	}
};

// Class AssetRegistry.AssetRegistry
// 0x0000 (0x0028 - 0x0028)
class IAssetRegistry final  : public IInterface
{
public:
	void PrioritizeSearchPath(const class FString& PathToPrioritize);
	void ScanFilesSynchronous(TArray<class FString>& InFilePaths, bool bForceRescan);
	void ScanModifiedAssetFiles(TArray<class FString>& InFilePaths);
	void ScanPathsSynchronous(TArray<class FString>& InPaths, bool bForceRescan);
	void SearchAllAssets(bool bSynchronousSearch);

	bool GetAllAssets(TArray<struct FAssetData>* OutAssetData, bool bIncludeOnlyOnDiskAssets) const;
	void GetAllCachedPaths(TArray<class FString>* OutPathList) const;
	struct FAssetData GetAssetByObjectPath(class FName ObjectPath, bool bIncludeOnlyOnDiskAssets) const;
	bool GetAssets(struct FARFilter& Filter, TArray<struct FAssetData>* OutAssetData) const;
	bool GetAssetsByClass(class FName ClassName, TArray<struct FAssetData>* OutAssetData, bool bSearchSubClasses) const;
	bool GetAssetsByPackageName(class FName PackageName, TArray<struct FAssetData>* OutAssetData, bool bIncludeOnlyOnDiskAssets) const;
	bool GetAssetsByPath(class FName PackagePath, TArray<struct FAssetData>* OutAssetData, bool bRecursive, bool bIncludeOnlyOnDiskAssets) const;
	void GetSubPaths(const class FString& InBasePath, TArray<class FString>* OutPathList, bool bInRecurse) const;
	bool HasAssets(class FName PackagePath, bool bRecursive) const;
	bool IsLoadingAssets() const;
	bool K2_GetDependencies(class FName PackageName, struct FAssetRegistryDependencyOptions& DependencyOptions, TArray<class FName>* OutDependencies) const;
	bool K2_GetReferencers(class FName PackageName, struct FAssetRegistryDependencyOptions& ReferenceOptions, TArray<class FName>* OutReferencers) const;
	void RunAssetsThroughFilter(TArray<struct FAssetData>& AssetDataList, struct FARFilter& Filter) const;
	void UseFilterToExcludeAssets(TArray<struct FAssetData>& AssetDataList, struct FARFilter& Filter) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetRegistry">();
	}
	static class IAssetRegistry* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAssetRegistry>();
	}
};

}

