#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ArcVehicles

#include "Basic.hpp"

#include "ArcVehicles_classes.hpp"
#include "ArcVehicles_parameters.hpp"


namespace SDK
{

// Function ArcVehicles.ArcVehiclePawn.GetOwningVehicle
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AArcBaseVehicle*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AArcBaseVehicle* AArcVehiclePawn::GetOwningVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehiclePawn", "GetOwningVehicle");

	Params::ArcVehiclePawn_GetOwningVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ArcVehicles.ArcVehiclePawn.GetSeatConfig
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UArcVehicleSeatConfig*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArcVehicleSeatConfig* AArcVehiclePawn::GetSeatConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehiclePawn", "GetSeatConfig");

	Params::ArcVehiclePawn_GetSeatConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ArcVehicles.ArcVehiclePawn.NotifyPlayerSeatChangeEvent
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArcVehicleSeatConfig*            ToSeat                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UArcVehicleSeatConfig*            FromSeat                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EArcVehicleSeatChangeType    SeatChangeEvent                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AArcVehiclePawn::NotifyPlayerSeatChangeEvent(class APlayerState* Player, class UArcVehicleSeatConfig* ToSeat, class UArcVehicleSeatConfig* FromSeat, enum class EArcVehicleSeatChangeType SeatChangeEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehiclePawn", "NotifyPlayerSeatChangeEvent");

	Params::ArcVehiclePawn_NotifyPlayerSeatChangeEvent Parms{};

	Parms.Player = Player;
	Parms.ToSeat = ToSeat;
	Parms.FromSeat = FromSeat;
	Parms.SeatChangeEvent = SeatChangeEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ArcVehicles.ArcVehiclePlayerSeatComponent.BP_OnRep_StoredPlayerState
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerState*                     InPreviousPlayerState                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArcVehiclePlayerSeatComponent::BP_OnRep_StoredPlayerState(class APlayerState* InPreviousPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehiclePlayerSeatComponent", "BP_OnRep_StoredPlayerState");

	Params::ArcVehiclePlayerSeatComponent_BP_OnRep_StoredPlayerState Parms{};

	Parms.InPreviousPlayerState = InPreviousPlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ArcVehicles.ArcVehiclePlayerSeatComponent.OnRep_SeatConfig
// (Native, Public, HasOutParams)
// Parameters:
// struct FArcVehicleSeatReference         InPreviousSeatConfig                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UArcVehiclePlayerSeatComponent::OnRep_SeatConfig(struct FArcVehicleSeatReference& InPreviousSeatConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehiclePlayerSeatComponent", "OnRep_SeatConfig");

	Params::ArcVehiclePlayerSeatComponent_OnRep_SeatConfig Parms{};

	Parms.InPreviousSeatConfig = std::move(InPreviousSeatConfig);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ArcVehicles.ArcVehiclePlayerSeatComponent.OnRep_ServerDebugStrings
// (Final, Native, Public)

void UArcVehiclePlayerSeatComponent::OnRep_ServerDebugStrings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehiclePlayerSeatComponent", "OnRep_ServerDebugStrings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ArcVehicles.ArcVehiclePlayerSeatComponent.OnRep_StoredPlayerState
// (Native, Public)
// Parameters:
// class APlayerState*                     InPreviousPlayerState                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArcVehiclePlayerSeatComponent::OnRep_StoredPlayerState(class APlayerState* InPreviousPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehiclePlayerSeatComponent", "OnRep_StoredPlayerState");

	Params::ArcVehiclePlayerSeatComponent_OnRep_StoredPlayerState Parms{};

	Parms.InPreviousPlayerState = InPreviousPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ArcVehicles.ArcVehiclePlayerSeatComponent.OnSeatChangeEvent
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// enum class EArcVehicleSeatChangeType    SeatChangeType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArcVehiclePlayerSeatComponent::OnSeatChangeEvent(enum class EArcVehicleSeatChangeType SeatChangeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehiclePlayerSeatComponent", "OnSeatChangeEvent");

	Params::ArcVehiclePlayerSeatComponent_OnSeatChangeEvent Parms{};

	Parms.SeatChangeType = SeatChangeType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ArcVehicles.ArcVehiclePlayerSeatComponent.ServerPrintDebug_Request
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void UArcVehiclePlayerSeatComponent::ServerPrintDebug_Request()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehiclePlayerSeatComponent", "ServerPrintDebug_Request");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ArcVehicles.ArcBaseVehicle.GetAllSeats
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class UArcVehicleSeatConfig*>    Seats                                                  (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AArcBaseVehicle::GetAllSeats(TArray<class UArcVehicleSeatConfig*>* Seats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcBaseVehicle", "GetAllSeats");

	Params::ArcBaseVehicle_GetAllSeats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Seats != nullptr)
		*Seats = Parms.Seats;
}


// Function ArcVehicles.ArcBaseVehicle.GetDriverSeat
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UArcVehicleSeatConfig*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArcVehicleSeatConfig* AArcBaseVehicle::GetDriverSeat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcBaseVehicle", "GetDriverSeat");

	Params::ArcBaseVehicle_GetDriverSeat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ArcVehicles.ArcBaseVehicle.GetNearestExitTransform
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       InputLocation                                          (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform AArcBaseVehicle::GetNearestExitTransform(const struct FTransform& InputLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcBaseVehicle", "GetNearestExitTransform");

	Params::ArcBaseVehicle_GetNearestExitTransform Parms{};

	Parms.InputLocation = std::move(InputLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ArcVehicles.ArcBaseVehicle.OnRep_ServerDebugStrings
// (Final, Native, Public)

void AArcBaseVehicle::OnRep_ServerDebugStrings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcBaseVehicle", "OnRep_ServerDebugStrings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ArcVehicles.ArcBaseVehicle.RequestEnterAnySeat
// (Native, Public, BlueprintCallable)
// Parameters:
// class APlayerState*                     InPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AArcBaseVehicle::RequestEnterAnySeat(class APlayerState* InPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcBaseVehicle", "RequestEnterAnySeat");

	Params::ArcBaseVehicle_RequestEnterAnySeat Parms{};

	Parms.InPlayerState = InPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ArcVehicles.ArcBaseVehicle.RequestEnterSeat
// (Native, Public, BlueprintCallable)
// Parameters:
// class APlayerState*                     InPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RequestedSeatIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreRestrictions                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AArcBaseVehicle::RequestEnterSeat(class APlayerState* InPlayerState, int32 RequestedSeatIndex, bool bIgnoreRestrictions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcBaseVehicle", "RequestEnterSeat");

	Params::ArcBaseVehicle_RequestEnterSeat Parms{};

	Parms.InPlayerState = InPlayerState;
	Parms.RequestedSeatIndex = RequestedSeatIndex;
	Parms.bIgnoreRestrictions = bIgnoreRestrictions;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ArcVehicles.ArcBaseVehicle.RequestLeaveVehicle
// (Native, Public, BlueprintCallable)
// Parameters:
// class APlayerState*                     InPlayerState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AArcBaseVehicle::RequestLeaveVehicle(class APlayerState* InPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcBaseVehicle", "RequestLeaveVehicle");

	Params::ArcBaseVehicle_RequestLeaveVehicle Parms{};

	Parms.InPlayerState = InPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ArcVehicles.ArcBaseVehicle.ServerPrintDebug_Request
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void AArcBaseVehicle::ServerPrintDebug_Request()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcBaseVehicle", "ServerPrintDebug_Request");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ArcVehicles.ArcBaseVehicle.SetupSeat
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UArcVehicleSeatConfig*            SeatConfig                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AArcBaseVehicle::SetupSeat(class UArcVehicleSeatConfig* SeatConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcBaseVehicle", "SetupSeat");

	Params::ArcBaseVehicle_SetupSeat Parms{};

	Parms.SeatConfig = SeatConfig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ArcVehicles.ArcBaseVehicle.GetSortedExitPoints
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       InputLocation                                          (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FTransform>               OutTransformArray                                      (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AArcBaseVehicle::GetSortedExitPoints(const struct FTransform& InputLocation, TArray<struct FTransform>* OutTransformArray) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcBaseVehicle", "GetSortedExitPoints");

	Params::ArcBaseVehicle_GetSortedExitPoints Parms{};

	Parms.InputLocation = std::move(InputLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTransformArray != nullptr)
		*OutTransformArray = Parms.OutTransformArray;
}


// Function ArcVehicles.ArcBaseVehicle.IsValidSeatIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InSeatIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AArcBaseVehicle::IsValidSeatIndex(int32 InSeatIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcBaseVehicle", "IsValidSeatIndex");

	Params::ArcBaseVehicle_IsValidSeatIndex Parms{};

	Parms.InSeatIndex = InSeatIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ArcVehicles.ArcVehicleBPFunctionLibrary.GetVehicleFromSeatConfig
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FArcVehicleSeatReference         SeatRef                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class AArcBaseVehicle*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AArcBaseVehicle* UArcVehicleBPFunctionLibrary::GetVehicleFromSeatConfig(const struct FArcVehicleSeatReference& SeatRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ArcVehicleBPFunctionLibrary", "GetVehicleFromSeatConfig");

	Params::ArcVehicleBPFunctionLibrary_GetVehicleFromSeatConfig Parms{};

	Parms.SeatRef = std::move(SeatRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ArcVehicles.ArcVehicleBPFunctionLibrary.GetVehicleSeatConfigFromRef
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FArcVehicleSeatReference         SeatRef                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UArcVehicleSeatConfig*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UArcVehicleSeatConfig* UArcVehicleBPFunctionLibrary::GetVehicleSeatConfigFromRef(const struct FArcVehicleSeatReference& SeatRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ArcVehicleBPFunctionLibrary", "GetVehicleSeatConfigFromRef");

	Params::ArcVehicleBPFunctionLibrary_GetVehicleSeatConfigFromRef Parms{};

	Parms.SeatRef = std::move(SeatRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ArcVehicles.ArcVehicleBPFunctionLibrary.IsSeatRefValid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FArcVehicleSeatReference         SeatRef                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UArcVehicleBPFunctionLibrary::IsSeatRefValid(const struct FArcVehicleSeatReference& SeatRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ArcVehicleBPFunctionLibrary", "IsSeatRefValid");

	Params::ArcVehicleBPFunctionLibrary_IsSeatRefValid Parms{};

	Parms.SeatRef = std::move(SeatRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ArcVehicles.ArcVehicleSeatConfig.AttachPlayerToSeat
// (Native, Public)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArcVehicleSeatConfig::AttachPlayerToSeat(class APlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehicleSeatConfig", "AttachPlayerToSeat");

	Params::ArcVehicleSeatConfig_AttachPlayerToSeat Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ArcVehicles.ArcVehicleSeatConfig.BP_AttachPlayerToSeat
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArcVehicleSeatConfig::BP_AttachPlayerToSeat(class APlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehicleSeatConfig", "BP_AttachPlayerToSeat");

	Params::ArcVehicleSeatConfig_BP_AttachPlayerToSeat Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ArcVehicles.ArcVehicleSeatConfig.BP_UnAttachPlayerFromSeat
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArcVehicleSeatConfig::BP_UnAttachPlayerFromSeat(class APlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehicleSeatConfig", "BP_UnAttachPlayerFromSeat");

	Params::ArcVehicleSeatConfig_BP_UnAttachPlayerFromSeat Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ArcVehicles.ArcVehicleSeatConfig.SetupSeatAttachment
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UArcVehicleSeatConfig::SetupSeatAttachment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehicleSeatConfig", "SetupSeatAttachment");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ArcVehicles.ArcVehicleSeatConfig.UnAttachPlayerFromSeat
// (Native, Public)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArcVehicleSeatConfig::UnAttachPlayerFromSeat(class APlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehicleSeatConfig", "UnAttachPlayerFromSeat");

	Params::ArcVehicleSeatConfig_UnAttachPlayerFromSeat Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ArcVehicles.ArcVehicleSeatConfig.GetVehicleOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AArcBaseVehicle*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AArcBaseVehicle* UArcVehicleSeatConfig::GetVehicleOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehicleSeatConfig", "GetVehicleOwner");

	Params::ArcVehicleSeatConfig_GetVehicleOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ArcVehicles.ArcVehicleSeatConfig.IsDriverSeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UArcVehicleSeatConfig::IsDriverSeat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehicleSeatConfig", "IsDriverSeat");

	Params::ArcVehicleSeatConfig_IsDriverSeat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ArcVehicles.ArcVehicleSeatConfig.IsOpenSeat
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UArcVehicleSeatConfig::IsOpenSeat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehicleSeatConfig", "IsOpenSeat");

	Params::ArcVehicleSeatConfig_IsOpenSeat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ArcVehicles.ArcVehicleSeatConfig_SeatPawn.OnRep_SeatPawn
// (Final, Native, Public)
// Parameters:
// class AArcVehiclePawn*                  OldSeatPawn                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArcVehicleSeatConfig_SeatPawn::OnRep_SeatPawn(class AArcVehiclePawn* OldSeatPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehicleSeatConfig_SeatPawn", "OnRep_SeatPawn");

	Params::ArcVehicleSeatConfig_SeatPawn_OnRep_SeatPawn Parms{};

	Parms.OldSeatPawn = OldSeatPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ArcVehicles.ArcVehicleTurretMovementComp.Server_ServerMove
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FRotator                         FullRotation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UArcVehicleTurretMovementComp::Server_ServerMove(const struct FRotator& FullRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArcVehicleTurretMovementComp", "Server_ServerMove");

	Params::ArcVehicleTurretMovementComp_Server_ServerMove Parms{};

	Parms.FullRotation = std::move(FullRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

