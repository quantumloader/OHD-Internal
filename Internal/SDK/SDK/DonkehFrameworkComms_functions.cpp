#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DonkehFrameworkComms

#include "Basic.hpp"

#include "DonkehFrameworkComms_classes.hpp"
#include "DonkehFrameworkComms_parameters.hpp"


namespace SDK
{

// Function DonkehFrameworkComms.CreateCommChannelCallbackProxy.CreateCommChannelFor
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannelDefinition*         ChannelDef                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ChannelNameOverride                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCreateCommChannelCallbackProxy*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCreateCommChannelCallbackProxy* UCreateCommChannelCallbackProxy::CreateCommChannelFor(class APlayerController* Player, class UDFCommChannelDefinition* ChannelDef, class FName ChannelNameOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CreateCommChannelCallbackProxy", "CreateCommChannelFor");

	Params::CreateCommChannelCallbackProxy_CreateCommChannelFor Parms{};

	Parms.Player = Player;
	Parms.ChannelDef = ChannelDef;
	Parms.ChannelNameOverride = ChannelNameOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommChannel.SetChannelState
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          NewChannelState                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFCommChannel::SetChannelState(class UObject* NewChannelState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFCommChannel", "SetChannelState");

	Params::DFCommChannel_SetChannelState Parms{};

	Parms.NewChannelState = NewChannelState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFCommChannel.GetChannelDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UDFCommChannel::GetChannelDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFCommChannel", "GetChannelDisplayName");

	Params::DFCommChannel_GetChannelDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommChannel.GetChannelGroupNameIfValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UDFCommChannel::GetChannelGroupNameIfValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFCommChannel", "GetChannelGroupNameIfValid");

	Params::DFCommChannel_GetChannelGroupNameIfValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommChannel.GetChannelName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UDFCommChannel::GetChannelName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFCommChannel", "GetChannelName");

	Params::DFCommChannel_GetChannelName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommChannel.GetChannelNameStr
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDFCommChannel::GetChannelNameStr() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFCommChannel", "GetChannelNameStr");

	Params::DFCommChannel_GetChannelNameStr Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommChannel.HasFormat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDFCommsFormatBase*               Format                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFCommChannel::HasFormat(class UDFCommsFormatBase* Format) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFCommChannel", "HasFormat");

	Params::DFCommChannel_HasFormat Parms{};

	Parms.Format = Format;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommChannel.IsReady
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFCommChannel::IsReady() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFCommChannel", "IsReady");

	Params::DFCommChannel_IsReady Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommChannelDefinition.InstancesChannelWithGroup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFCommChannelDefinition::InstancesChannelWithGroup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFCommChannelDefinition", "InstancesChannelWithGroup");

	Params::DFCommChannelDefinition_InstancesChannelWithGroup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommChannelStateInterface.BP_OnSetupState
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FDFCommStateSetupParams          SetupParams                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IDFCommChannelStateInterface::BP_OnSetupState(struct FDFCommStateSetupParams& SetupParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFCommChannelStateInterface", "BP_OnSetupState");

	Params::DFCommChannelStateInterface_BP_OnSetupState Parms{};

	Parms.SetupParams = std::move(SetupParams);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DonkehFrameworkComms.DFCommChannelStateLibrary.GetOwningCommChannel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TScriptInterface<class IDFCommChannelStateInterface>ChannelState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDFCommChannel* UDFCommChannelStateLibrary::GetOwningCommChannel(TScriptInterface<class IDFCommChannelStateInterface> ChannelState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommChannelStateLibrary", "GetOwningCommChannel");

	Params::DFCommChannelStateLibrary_GetOwningCommChannel Parms{};

	Parms.ChannelState = ChannelState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommChannelStateLibrary.IsChannelStatePrepared
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TScriptInterface<class IDFCommChannelStateInterface>ChannelState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFCommChannelStateLibrary::IsChannelStatePrepared(TScriptInterface<class IDFCommChannelStateInterface> ChannelState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommChannelStateLibrary", "IsChannelStatePrepared");

	Params::DFCommChannelStateLibrary_IsChannelStatePrepared Parms{};

	Parms.ChannelState = ChannelState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommChannelStateLibrary.NotifyChannelOfPreparedState
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// TScriptInterface<class IDFCommChannelStateInterface>ChannelState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

void UDFCommChannelStateLibrary::NotifyChannelOfPreparedState(TScriptInterface<class IDFCommChannelStateInterface> ChannelState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommChannelStateLibrary", "NotifyChannelOfPreparedState");

	Params::DFCommChannelStateLibrary_NotifyChannelOfPreparedState Parms{};

	Parms.ChannelState = ChannelState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFCommsFormatBase.CanReadFromChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ChannelName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFCommsFormatBase::CanReadFromChannel(class FName ChannelName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFCommsFormatBase", "CanReadFromChannel");

	Params::DFCommsFormatBase_CanReadFromChannel Parms{};

	Parms.ChannelName = ChannelName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommsFormatBase.CanWriteToChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ChannelName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFCommsFormatBase::CanWriteToChannel(class FName ChannelName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFCommsFormatBase", "CanWriteToChannel");

	Params::DFCommsFormatBase_CanWriteToChannel Parms{};

	Parms.ChannelName = ChannelName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommsFormatBase.HasAccessToChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ChannelName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EDFCommsFormatAccessRule     AccessRulesToCheck                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFCommsFormatBase::HasAccessToChannel(class FName ChannelName, enum class EDFCommsFormatAccessRule AccessRulesToCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFCommsFormatBase", "HasAccessToChannel");

	Params::DFCommsFormatBase_HasAccessToChannel Parms{};

	Parms.ChannelName = ChannelName;
	Parms.AccessRulesToCheck = AccessRulesToCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommStatics.ClearCurrentExclusiveChannelForFormat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommsFormatBase*               FormatToUpdate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFCommStatics::ClearCurrentExclusiveChannelForFormat(class APlayerController* Player, class UDFCommsFormatBase* FormatToUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommStatics", "ClearCurrentExclusiveChannelForFormat");

	Params::DFCommStatics_ClearCurrentExclusiveChannelForFormat Parms{};

	Parms.Player = Player;
	Parms.FormatToUpdate = FormatToUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFCommStatics.ClearCurrentExclusiveChannelForFormatByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FormatNameToUpdate                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFCommStatics::ClearCurrentExclusiveChannelForFormatByName(class APlayerController* Player, class FName FormatNameToUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommStatics", "ClearCurrentExclusiveChannelForFormatByName");

	Params::DFCommStatics_ClearCurrentExclusiveChannelForFormatByName Parms{};

	Parms.Player = Player;
	Parms.FormatNameToUpdate = FormatNameToUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFCommStatics.CommsFormatGetExclusiveChannel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UDFCommsFormatBase*               Format                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDFCommChannel* UDFCommStatics::CommsFormatGetExclusiveChannel(class UDFCommsFormatBase* Format)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommStatics", "CommsFormatGetExclusiveChannel");

	Params::DFCommStatics_CommsFormatGetExclusiveChannel Parms{};

	Parms.Format = Format;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommStatics.CommsFormatGetExclusiveChannelByName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                PlayerFormatOwner                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FormatName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDFCommChannel* UDFCommStatics::CommsFormatGetExclusiveChannelByName(class APlayerController* PlayerFormatOwner, class FName FormatName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommStatics", "CommsFormatGetExclusiveChannelByName");

	Params::DFCommStatics_CommsFormatGetExclusiveChannelByName Parms{};

	Parms.PlayerFormatOwner = PlayerFormatOwner;
	Parms.FormatName = FormatName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommStatics.CommsFormatHasExclusiveChannel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UDFCommsFormatBase*               Format                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFCommStatics::CommsFormatHasExclusiveChannel(class UDFCommsFormatBase* Format)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommStatics", "CommsFormatHasExclusiveChannel");

	Params::DFCommStatics_CommsFormatHasExclusiveChannel Parms{};

	Parms.Format = Format;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommStatics.CommsFormatHasExclusiveChannelByName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                PlayerFormatOwner                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FormatName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFCommStatics::CommsFormatHasExclusiveChannelByName(class APlayerController* PlayerFormatOwner, class FName FormatName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommStatics", "CommsFormatHasExclusiveChannelByName");

	Params::DFCommStatics_CommsFormatHasExclusiveChannelByName Parms{};

	Parms.PlayerFormatOwner = PlayerFormatOwner;
	Parms.FormatName = FormatName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommStatics.CommsFormatUsesChannel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                Player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommsFormatBase*               Format                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   ChannelToCheck                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFCommStatics::CommsFormatUsesChannel(class APlayerController* Player, class UDFCommsFormatBase* Format, class UDFCommChannel* ChannelToCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommStatics", "CommsFormatUsesChannel");

	Params::DFCommStatics_CommsFormatUsesChannel Parms{};

	Parms.Player = Player;
	Parms.Format = Format;
	Parms.ChannelToCheck = ChannelToCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommStatics.CommsFormatUsesChannelByName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                Player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FormatName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ChannelNameToCheck                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFCommStatics::CommsFormatUsesChannelByName(class APlayerController* Player, class FName FormatName, class FName ChannelNameToCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommStatics", "CommsFormatUsesChannelByName");

	Params::DFCommStatics_CommsFormatUsesChannelByName Parms{};

	Parms.Player = Player;
	Parms.FormatName = FormatName;
	Parms.ChannelNameToCheck = ChannelNameToCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommStatics.FindCommsComponentByPlayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                Player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFPlayerCommsComponent*          OutPlayerCommsComp                                     (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFCommStatics::FindCommsComponentByPlayer(class APlayerController* Player, class UDFPlayerCommsComponent** OutPlayerCommsComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommStatics", "FindCommsComponentByPlayer");

	Params::DFCommStatics_FindCommsComponentByPlayer Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPlayerCommsComp != nullptr)
		*OutPlayerCommsComp = std::move(Parms.OutPlayerCommsComp);

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommStatics.PlayerHasCommChannel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                Player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   Channel                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFCommStatics::PlayerHasCommChannel(class APlayerController* Player, class UDFCommChannel* Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommStatics", "PlayerHasCommChannel");

	Params::DFCommStatics_PlayerHasCommChannel Parms{};

	Parms.Player = Player;
	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommStatics.PlayerHasCommChannelByName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                Player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ChannelName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFCommStatics::PlayerHasCommChannelByName(class APlayerController* Player, class FName ChannelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommStatics", "PlayerHasCommChannelByName");

	Params::DFCommStatics_PlayerHasCommChannelByName Parms{};

	Parms.Player = Player;
	Parms.ChannelName = ChannelName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommStatics.SendCommsViaChannel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerSender                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommsFormatBase*               FormatToUse                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   ReceivingChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDFGenericChannelMsg             MsgToSend                                              (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    bUseChannelAsNewExclusive                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFCommStatics::SendCommsViaChannel(class APlayerController* PlayerSender, class UDFCommsFormatBase* FormatToUse, class UDFCommChannel* ReceivingChannel, struct FDFGenericChannelMsg* MsgToSend, bool bUseChannelAsNewExclusive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommStatics", "SendCommsViaChannel");

	Params::DFCommStatics_SendCommsViaChannel Parms{};

	Parms.PlayerSender = PlayerSender;
	Parms.FormatToUse = FormatToUse;
	Parms.ReceivingChannel = ReceivingChannel;
	Parms.bUseChannelAsNewExclusive = bUseChannelAsNewExclusive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MsgToSend != nullptr)
		*MsgToSend = Parms.MsgToSend;
}


// Function DonkehFrameworkComms.DFCommStatics.SendCommsViaChannelByName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerSender                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FormatName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReceivingChannelName                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDFGenericChannelMsg             MsgToSend                                              (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    bUseChannelAsNewExclusive                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFCommStatics::SendCommsViaChannelByName(class APlayerController* PlayerSender, class FName FormatName, class FName ReceivingChannelName, struct FDFGenericChannelMsg* MsgToSend, bool bUseChannelAsNewExclusive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommStatics", "SendCommsViaChannelByName");

	Params::DFCommStatics_SendCommsViaChannelByName Parms{};

	Parms.PlayerSender = PlayerSender;
	Parms.FormatName = FormatName;
	Parms.ReceivingChannelName = ReceivingChannelName;
	Parms.bUseChannelAsNewExclusive = bUseChannelAsNewExclusive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MsgToSend != nullptr)
		*MsgToSend = Parms.MsgToSend;
}


// Function DonkehFrameworkComms.DFCommStatics.UpdateExclusiveChannelForFormat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommsFormatBase*               FormatToUpdate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   SingleChannelToUse                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFCommStatics::UpdateExclusiveChannelForFormat(class APlayerController* Player, class UDFCommsFormatBase* FormatToUpdate, class UDFCommChannel* SingleChannelToUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommStatics", "UpdateExclusiveChannelForFormat");

	Params::DFCommStatics_UpdateExclusiveChannelForFormat Parms{};

	Parms.Player = Player;
	Parms.FormatToUpdate = FormatToUpdate;
	Parms.SingleChannelToUse = SingleChannelToUse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFCommStatics.UpdateExclusiveChannelForFormatByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FormatNameToUpdate                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SingleChannelNameToUse                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFCommStatics::UpdateExclusiveChannelForFormatByName(class APlayerController* Player, class FName FormatNameToUpdate, class FName SingleChannelNameToUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommStatics", "UpdateExclusiveChannelForFormatByName");

	Params::DFCommStatics_UpdateExclusiveChannelForFormatByName Parms{};

	Parms.Player = Player;
	Parms.FormatNameToUpdate = FormatNameToUpdate;
	Parms.SingleChannelNameToUse = SingleChannelNameToUse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFCommWorldSubsystem.InitPlayerComms
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFPlayerCommsComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDFPlayerCommsComponent* UDFCommWorldSubsystem::InitPlayerComms(class APlayerController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFCommWorldSubsystem", "InitPlayerComms");

	Params::DFCommWorldSubsystem_InitPlayerComms Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFCommWorldSubsystem.GameModePostLogin
// (Final, Native, Private)
// Parameters:
// class AGameModeBase*                    GameMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                NewPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFCommWorldSubsystem::GameModePostLogin(class AGameModeBase* GameMode, class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFCommWorldSubsystem", "GameModePostLogin");

	Params::DFCommWorldSubsystem_GameModePostLogin Parms{};

	Parms.GameMode = GameMode;
	Parms.NewPlayer = NewPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFCommWorldSubsystem.PostSeamlessTravelPCDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           DestroyedPlayerActor                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFCommWorldSubsystem::PostSeamlessTravelPCDestroyed(class AActor* DestroyedPlayerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFCommWorldSubsystem", "PostSeamlessTravelPCDestroyed");

	Params::DFCommWorldSubsystem_PostSeamlessTravelPCDestroyed Parms{};

	Parms.DestroyedPlayerActor = DestroyedPlayerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.ClearCurrentExclusiveChannelForCommsFormat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDFCommsFormatBase*               Format                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::ClearCurrentExclusiveChannelForCommsFormat(class UDFCommsFormatBase* Format)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "ClearCurrentExclusiveChannelForCommsFormat");

	Params::DFPlayerCommsComponent_ClearCurrentExclusiveChannelForCommsFormat Parms{};

	Parms.Format = Format;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.ClearCurrentExclusiveChannelForCommsFormatByName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             FormatName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::ClearCurrentExclusiveChannelForCommsFormatByName(class FName& FormatName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "ClearCurrentExclusiveChannelForCommsFormatByName");

	Params::DFPlayerCommsComponent_ClearCurrentExclusiveChannelForCommsFormatByName Parms{};

	Parms.FormatName = FormatName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.ClientClearCurrentExclusiveChannelForCommsFormat
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// class FName                             FormatName                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::ClientClearCurrentExclusiveChannelForCommsFormat(class FName& FormatName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "ClientClearCurrentExclusiveChannelForCommsFormat");

	Params::DFPlayerCommsComponent_ClientClearCurrentExclusiveChannelForCommsFormat Parms{};

	Parms.FormatName = FormatName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.ClientRecvCommMsgFromChannel
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// class FName                             SourceFormatName                                       (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   SourceChannel                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDFGenericChannelMsg             ReceivedCommMsg                                        (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::ClientRecvCommMsgFromChannel(class FName& SourceFormatName, class UDFCommChannel* SourceChannel, struct FDFGenericChannelMsg& ReceivedCommMsg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "ClientRecvCommMsgFromChannel");

	Params::DFPlayerCommsComponent_ClientRecvCommMsgFromChannel Parms{};

	Parms.SourceFormatName = SourceFormatName;
	Parms.SourceChannel = SourceChannel;
	Parms.ReceivedCommMsg = std::move(ReceivedCommMsg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.ClientUpdateExclusiveChannelToUseForCommsFormat
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// class FName                             FormatName                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   SingleChannelToUse                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::ClientUpdateExclusiveChannelToUseForCommsFormat(class FName& FormatName, class UDFCommChannel* SingleChannelToUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "ClientUpdateExclusiveChannelToUseForCommsFormat");

	Params::DFPlayerCommsComponent_ClientUpdateExclusiveChannelToUseForCommsFormat Parms{};

	Parms.FormatName = FormatName;
	Parms.SingleChannelToUse = SingleChannelToUse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.ReceiveCommChannelAdded
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UDFCommChannel*                   AddedChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::ReceiveCommChannelAdded(class UDFCommChannel* AddedChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "ReceiveCommChannelAdded");

	Params::DFPlayerCommsComponent_ReceiveCommChannelAdded Parms{};

	Parms.AddedChannel = AddedChannel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.ReceiveCommChannelPreRemoved
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UDFCommChannel*                   RemovedChannel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::ReceiveCommChannelPreRemoved(class UDFCommChannel* RemovedChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "ReceiveCommChannelPreRemoved");

	Params::DFPlayerCommsComponent_ReceiveCommChannelPreRemoved Parms{};

	Parms.RemovedChannel = RemovedChannel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.RemoveAllCommChannels
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UDFPlayerCommsComponent::RemoveAllCommChannels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "RemoveAllCommChannels");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.RemoveCommChannel
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UDFCommChannel*                   ChannelToRemove                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::RemoveCommChannel(class UDFCommChannel* ChannelToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "RemoveCommChannel");

	Params::DFPlayerCommsComponent_RemoveCommChannel Parms{};

	Parms.ChannelToRemove = ChannelToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.RemoveCommChannelByName
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ChannelNameToRemove                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::RemoveCommChannelByName(class FName ChannelNameToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "RemoveCommChannelByName");

	Params::DFPlayerCommsComponent_RemoveCommChannelByName Parms{};

	Parms.ChannelNameToRemove = ChannelNameToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.SendCommMsgViaChannel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDFCommsFormatBase*               FormatToUse                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   ReceivingChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDFGenericChannelMsg             CommMsgToSend                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    bUseChannelAsNewExclusive                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::SendCommMsgViaChannel(class UDFCommsFormatBase* FormatToUse, class UDFCommChannel* ReceivingChannel, struct FDFGenericChannelMsg* CommMsgToSend, bool bUseChannelAsNewExclusive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "SendCommMsgViaChannel");

	Params::DFPlayerCommsComponent_SendCommMsgViaChannel Parms{};

	Parms.FormatToUse = FormatToUse;
	Parms.ReceivingChannel = ReceivingChannel;
	Parms.bUseChannelAsNewExclusive = bUseChannelAsNewExclusive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CommMsgToSend != nullptr)
		*CommMsgToSend = Parms.CommMsgToSend;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.SendCommMsgViaChannelByName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             FormatName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReceivingChannelName                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDFGenericChannelMsg             CommMsgToSend                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    bUseChannelAsNewExclusive                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::SendCommMsgViaChannelByName(class FName& FormatName, class FName& ReceivingChannelName, struct FDFGenericChannelMsg* CommMsgToSend, bool bUseChannelAsNewExclusive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "SendCommMsgViaChannelByName");

	Params::DFPlayerCommsComponent_SendCommMsgViaChannelByName Parms{};

	Parms.FormatName = FormatName;
	Parms.ReceivingChannelName = ReceivingChannelName;
	Parms.bUseChannelAsNewExclusive = bUseChannelAsNewExclusive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CommMsgToSend != nullptr)
		*CommMsgToSend = Parms.CommMsgToSend;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.ServerChannelOpened
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// class UDFCommChannel*                   AckedChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::ServerChannelOpened(class UDFCommChannel* AckedChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "ServerChannelOpened");

	Params::DFPlayerCommsComponent_ServerChannelOpened Parms{};

	Parms.AckedChannel = AckedChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.ServerClearCurrentExclusiveChannelForCommsFormat
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// class FName                             FormatName                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::ServerClearCurrentExclusiveChannelForCommsFormat(class FName& FormatName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "ServerClearCurrentExclusiveChannelForCommsFormat");

	Params::DFPlayerCommsComponent_ServerClearCurrentExclusiveChannelForCommsFormat Parms{};

	Parms.FormatName = FormatName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.ServerRequestExclusiveChannelUsedForCommsFormat
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class FName                             RequestedFormatName                                    (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::ServerRequestExclusiveChannelUsedForCommsFormat(class FName& RequestedFormatName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "ServerRequestExclusiveChannelUsedForCommsFormat");

	Params::DFPlayerCommsComponent_ServerRequestExclusiveChannelUsedForCommsFormat Parms{};

	Parms.RequestedFormatName = RequestedFormatName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.ServerSendCommMsgViaChannel
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class FName                             FormatName                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   ReceivingChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDFGenericChannelMsg             CommMsg                                                (Parm, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::ServerSendCommMsgViaChannel(class FName& FormatName, class UDFCommChannel* ReceivingChannel, const struct FDFGenericChannelMsg& CommMsg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "ServerSendCommMsgViaChannel");

	Params::DFPlayerCommsComponent_ServerSendCommMsgViaChannel Parms{};

	Parms.FormatName = FormatName;
	Parms.ReceivingChannel = ReceivingChannel;
	Parms.CommMsg = std::move(CommMsg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.ServerSendCommMsgViaExclChannel
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class FName                             FormatName                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   ReceivingChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDFGenericChannelMsg             CommMsg                                                (Parm, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::ServerSendCommMsgViaExclChannel(class FName& FormatName, class UDFCommChannel* ReceivingChannel, const struct FDFGenericChannelMsg& CommMsg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "ServerSendCommMsgViaExclChannel");

	Params::DFPlayerCommsComponent_ServerSendCommMsgViaExclChannel Parms{};

	Parms.FormatName = FormatName;
	Parms.ReceivingChannel = ReceivingChannel;
	Parms.CommMsg = std::move(CommMsg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.ServerUpdateExclusiveChannelToUseForCommsFormat
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// class FName                             FormatName                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   SingleChannelToUse                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::ServerUpdateExclusiveChannelToUseForCommsFormat(class FName& FormatName, class UDFCommChannel* SingleChannelToUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "ServerUpdateExclusiveChannelToUseForCommsFormat");

	Params::DFPlayerCommsComponent_ServerUpdateExclusiveChannelToUseForCommsFormat Parms{};

	Parms.FormatName = FormatName;
	Parms.SingleChannelToUse = SingleChannelToUse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.UpdateExclusiveChannelToUseForCommsFormat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDFCommsFormatBase*               Format                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   SingleChannelToUse                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::UpdateExclusiveChannelToUseForCommsFormat(class UDFCommsFormatBase* Format, class UDFCommChannel* SingleChannelToUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "UpdateExclusiveChannelToUseForCommsFormat");

	Params::DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormat Parms{};

	Parms.Format = Format;
	Parms.SingleChannelToUse = SingleChannelToUse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.UpdateExclusiveChannelToUseForCommsFormatByName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             FormatName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SingleChannelNameToUse                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFPlayerCommsComponent::UpdateExclusiveChannelToUseForCommsFormatByName(class FName& FormatName, class FName& SingleChannelNameToUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "UpdateExclusiveChannelToUseForCommsFormatByName");

	Params::DFPlayerCommsComponent_UpdateExclusiveChannelToUseForCommsFormatByName Parms{};

	Parms.FormatName = FormatName;
	Parms.SingleChannelNameToUse = SingleChannelNameToUse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.CanRecvCommMsgViaChannel
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             SourceFormatName                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SourceChannelName                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDFGenericChannelMsg             CommMsgToReceive                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFPlayerCommsComponent::CanRecvCommMsgViaChannel(class FName& SourceFormatName, class FName& SourceChannelName, struct FDFGenericChannelMsg& CommMsgToReceive) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "CanRecvCommMsgViaChannel");

	Params::DFPlayerCommsComponent_CanRecvCommMsgViaChannel Parms{};

	Parms.SourceFormatName = SourceFormatName;
	Parms.SourceChannelName = SourceChannelName;
	Parms.CommMsgToReceive = std::move(CommMsgToReceive);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.CanSendAndRecvCommMsgViaChannel
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             FormatName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ChannelName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDFGenericChannelMsg             CommMsg                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFPlayerCommsComponent::CanSendAndRecvCommMsgViaChannel(class FName& FormatName, class FName& ChannelName, struct FDFGenericChannelMsg& CommMsg) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "CanSendAndRecvCommMsgViaChannel");

	Params::DFPlayerCommsComponent_CanSendAndRecvCommMsgViaChannel Parms{};

	Parms.FormatName = FormatName;
	Parms.ChannelName = ChannelName;
	Parms.CommMsg = std::move(CommMsg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.CanSendCommMsgViaChannel
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDFCommsFormatBase*               ReceivingFormat                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   ReceivingChannel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDFGenericChannelMsg             CommMsgToSend                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bUseChannelAsNewExclusive                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFPlayerCommsComponent::CanSendCommMsgViaChannel(class UDFCommsFormatBase* ReceivingFormat, class UDFCommChannel* ReceivingChannel, struct FDFGenericChannelMsg& CommMsgToSend, bool bUseChannelAsNewExclusive) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "CanSendCommMsgViaChannel");

	Params::DFPlayerCommsComponent_CanSendCommMsgViaChannel Parms{};

	Parms.ReceivingFormat = ReceivingFormat;
	Parms.ReceivingChannel = ReceivingChannel;
	Parms.CommMsgToSend = std::move(CommMsgToSend);
	Parms.bUseChannelAsNewExclusive = bUseChannelAsNewExclusive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.ContainsAssociatedCommsFormat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             FormatName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFPlayerCommsComponent::ContainsAssociatedCommsFormat(class FName FormatName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "ContainsAssociatedCommsFormat");

	Params::DFPlayerCommsComponent_ContainsAssociatedCommsFormat Parms{};

	Parms.FormatName = FormatName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.ContainsCommChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDFCommChannel*                   ChannelToCheck                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFPlayerCommsComponent::ContainsCommChannel(class UDFCommChannel* ChannelToCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "ContainsCommChannel");

	Params::DFPlayerCommsComponent_ContainsCommChannel Parms{};

	Parms.ChannelToCheck = ChannelToCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.ContainsCommChannelByName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ChannelNameToCheck                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFPlayerCommsComponent::ContainsCommChannelByName(class FName ChannelNameToCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "ContainsCommChannelByName");

	Params::DFPlayerCommsComponent_ContainsCommChannelByName Parms{};

	Parms.ChannelNameToCheck = ChannelNameToCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.FindAssociatedCommsFormat
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             FormatName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommsFormatBase*               OutFormatFound                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFPlayerCommsComponent::FindAssociatedCommsFormat(class FName FormatName, class UDFCommsFormatBase** OutFormatFound) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "FindAssociatedCommsFormat");

	Params::DFPlayerCommsComponent_FindAssociatedCommsFormat Parms{};

	Parms.FormatName = FormatName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFormatFound != nullptr)
		*OutFormatFound = std::move(Parms.OutFormatFound);

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.FindCommChannel
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ChannelName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   OutChannelFound                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFPlayerCommsComponent::FindCommChannel(class FName ChannelName, class UDFCommChannel** OutChannelFound) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "FindCommChannel");

	Params::DFPlayerCommsComponent_FindCommChannel Parms{};

	Parms.ChannelName = ChannelName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutChannelFound != nullptr)
		*OutChannelFound = std::move(Parms.OutChannelFound);

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.FormatHasExclusiveChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDFCommsFormatBase*               Format                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFPlayerCommsComponent::FormatHasExclusiveChannel(class UDFCommsFormatBase* Format) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "FormatHasExclusiveChannel");

	Params::DFPlayerCommsComponent_FormatHasExclusiveChannel Parms{};

	Parms.Format = Format;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.FormatHasExclusiveChannelByName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             FormatName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFPlayerCommsComponent::FormatHasExclusiveChannelByName(class FName& FormatName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "FormatHasExclusiveChannelByName");

	Params::DFPlayerCommsComponent_FormatHasExclusiveChannelByName Parms{};

	Parms.FormatName = FormatName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.FormatUsesChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDFCommsFormatBase*               Format                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   ChannelToCheck                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFPlayerCommsComponent::FormatUsesChannel(class UDFCommsFormatBase* Format, class UDFCommChannel* ChannelToCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "FormatUsesChannel");

	Params::DFPlayerCommsComponent_FormatUsesChannel Parms{};

	Parms.Format = Format;
	Parms.ChannelToCheck = ChannelToCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFPlayerCommsComponent.FormatUsesChannelByName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             FormatName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ChannelNameToCheck                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFPlayerCommsComponent::FormatUsesChannelByName(class FName& FormatName, class FName& ChannelNameToCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFPlayerCommsComponent", "FormatUsesChannelByName");

	Params::DFPlayerCommsComponent_FormatUsesChannelByName Parms{};

	Parms.FormatName = FormatName;
	Parms.ChannelNameToCheck = ChannelNameToCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFVOIPCommsFormat.OnTalkerPSDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedPS                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFVOIPCommsFormat::OnTalkerPSDestroyed(class AActor* DestroyedPS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DFVOIPCommsFormat", "OnTalkerPSDestroyed");

	Params::DFVOIPCommsFormat_OnTalkerPSDestroyed Parms{};

	Parms.DestroyedPS = DestroyedPS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFVOIPCommStatics.ApplyVOIPTalkerSettingsForPlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerState*                     TalkerPlayerState                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ListenerLocalUserNum                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDFVOIPCommStatics::ApplyVOIPTalkerSettingsForPlayer(class APlayerState* TalkerPlayerState, uint8 ListenerLocalUserNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFVOIPCommStatics", "ApplyVOIPTalkerSettingsForPlayer");

	Params::DFVOIPCommStatics_ApplyVOIPTalkerSettingsForPlayer Parms{};

	Parms.TalkerPlayerState = TalkerPlayerState;
	Parms.ListenerLocalUserNum = ListenerLocalUserNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DonkehFrameworkComms.DFVOIPCommStatics.GetValidVoiceEntryForPlayer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerState*                     PlayerState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDFPlayerVOIPTalkingState  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FDFPlayerVOIPTalkingState UDFVOIPCommStatics::GetValidVoiceEntryForPlayer(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFVOIPCommStatics", "GetValidVoiceEntryForPlayer");

	Params::DFVOIPCommStatics_GetValidVoiceEntryForPlayer Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFVOIPCommStatics.GetVoiceSynthComponentForVOIPTalker
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UVOIPTalker*                      Talker                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVoipListenerSynthComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVoipListenerSynthComponent* UDFVOIPCommStatics::GetVoiceSynthComponentForVOIPTalker(class UVOIPTalker* Talker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFVOIPCommStatics", "GetVoiceSynthComponentForVOIPTalker");

	Params::DFVOIPCommStatics_GetVoiceSynthComponentForVOIPTalker Parms{};

	Parms.Talker = Talker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFVOIPCommStatics.GetVoiceSynthOwnerOfAudioComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAudioComponent*                  TalkerAudioComp                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UVoipListenerSynthComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVoipListenerSynthComponent* UDFVOIPCommStatics::GetVoiceSynthOwnerOfAudioComponent(class UAudioComponent* TalkerAudioComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFVOIPCommStatics", "GetVoiceSynthOwnerOfAudioComponent");

	Params::DFVOIPCommStatics_GetVoiceSynthOwnerOfAudioComponent Parms{};

	Parms.TalkerAudioComp = TalkerAudioComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFVOIPCommStatics.IsPlayerTalkerPendingReset
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerState*                     PlayerState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFVOIPCommStatics::IsPlayerTalkerPendingReset(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFVOIPCommStatics", "IsPlayerTalkerPendingReset");

	Params::DFVOIPCommStatics_IsPlayerTalkerPendingReset Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFVOIPCommStatics.IsPlayerTalking
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerState*                     PlayerState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFVOIPCommStatics::IsPlayerTalking(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFVOIPCommStatics", "IsPlayerTalking");

	Params::DFVOIPCommStatics_IsPlayerTalking Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFVOIPCommStatics.IsPlayerTalkingOverChannel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerState*                     PlayerState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDFCommChannel*                   TalkChannel                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFVOIPCommStatics::IsPlayerTalkingOverChannel(class APlayerState* PlayerState, class UDFCommChannel* TalkChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFVOIPCommStatics", "IsPlayerTalkingOverChannel");

	Params::DFVOIPCommStatics_IsPlayerTalkingOverChannel Parms{};

	Parms.PlayerState = PlayerState;
	Parms.TalkChannel = TalkChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DonkehFrameworkComms.DFVOIPCommStatics.WasPlayerTalking
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerState*                     PlayerState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDFVOIPCommStatics::WasPlayerTalking(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DFVOIPCommStatics", "WasPlayerTalking");

	Params::DFVOIPCommStatics_WasPlayerTalking Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

