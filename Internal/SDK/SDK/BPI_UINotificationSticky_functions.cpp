#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_UINotificationSticky

#include "Basic.hpp"

#include "BPI_UINotificationSticky_classes.hpp"
#include "BPI_UINotificationSticky_parameters.hpp"


namespace SDK
{

// Function BPI_UINotificationSticky.BPI_UINotificationSticky_C.Get Is Sticky?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsSticky                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   StickyPriority                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_UINotificationSticky_C::Get_Is_Sticky_(bool* bIsSticky, int32* StickyPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_UINotificationSticky_C", "Get Is Sticky?");

	Params::BPI_UINotificationSticky_C_Get_Is_Sticky_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsSticky != nullptr)
		*bIsSticky = std::move(Parms.bIsSticky);

	if (StickyPriority != nullptr)
		*StickyPriority = std::move(Parms.StickyPriority);
}


// Function BPI_UINotificationSticky.BPI_UINotificationSticky_C.Set Top
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_UINotificationSticky_C::Set_Top(bool bTop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_UINotificationSticky_C", "Set Top");

	Params::BPI_UINotificationSticky_C_Set_Top Parms{};

	Parms.bTop = bTop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_UINotificationSticky.BPI_UINotificationSticky_C.Set Tray
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWBP_NotificationTray_C*          Notification_Tray                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_UINotificationSticky_C::Set_Tray(class UWBP_NotificationTray_C* Notification_Tray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_UINotificationSticky_C", "Set Tray");

	Params::BPI_UINotificationSticky_C_Set_Tray Parms{};

	Parms.Notification_Tray = Notification_Tray;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_UINotificationSticky.BPI_UINotificationSticky_C.Positive Vote
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_UINotificationSticky_C::Positive_Vote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_UINotificationSticky_C", "Positive Vote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_UINotificationSticky.BPI_UINotificationSticky_C.Negative Vote
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_UINotificationSticky_C::Negative_Vote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_UINotificationSticky_C", "Negative Vote");

	UObject::ProcessEvent(Func, nullptr);
}

}

