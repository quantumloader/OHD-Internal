#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FantasticPerspectivePlugin

#include "Basic.hpp"

#include "FantasticPerspectivePlugin_classes.hpp"
#include "FantasticPerspectivePlugin_parameters.hpp"


namespace SDK
{

// Function FantasticPerspectivePlugin.FantasticPerspectiveActor.Apply
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EFantasticPerspectiveStereoscopicPassStereoPass                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ViewOrigin                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          ViewRotationMatrix                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                          ProjectionMatrix                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          OutViewOrigin                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          OutViewRotationMatrix                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                          OutProjectionMatrix                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFantasticPerspectiveActor::Apply(class APlayerController* PlayerController, enum class EFantasticPerspectiveStereoscopicPass StereoPass, const struct FVector& ViewOrigin, const struct FMatrix& ViewRotationMatrix, const struct FMatrix& ProjectionMatrix, struct FVector* OutViewOrigin, struct FMatrix* OutViewRotationMatrix, struct FMatrix* OutProjectionMatrix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FantasticPerspectiveActor", "Apply");

	Params::FantasticPerspectiveActor_Apply Parms{};

	Parms.PlayerController = PlayerController;
	Parms.StereoPass = StereoPass;
	Parms.ViewOrigin = std::move(ViewOrigin);
	Parms.ViewRotationMatrix = std::move(ViewRotationMatrix);
	Parms.ProjectionMatrix = std::move(ProjectionMatrix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutViewOrigin != nullptr)
		*OutViewOrigin = Parms.OutViewOrigin;

	if (OutViewRotationMatrix != nullptr)
		*OutViewRotationMatrix = Parms.OutViewRotationMatrix;

	if (OutProjectionMatrix != nullptr)
		*OutProjectionMatrix = Parms.OutProjectionMatrix;

	return Parms.ReturnValue;
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveComponent.Apply
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// enum class EFantasticPerspectiveStereoscopicPassStereoPass                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ViewOrigin                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          ViewRotationMatrix                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                          ProjectionMatrix                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          OutViewOrigin                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          OutViewRotationMatrix                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                          OutProjectionMatrix                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFantasticPerspectiveComponent::Apply(class APlayerController* PlayerController, enum class EFantasticPerspectiveStereoscopicPass StereoPass, const struct FVector& ViewOrigin, const struct FMatrix& ViewRotationMatrix, const struct FMatrix& ProjectionMatrix, struct FVector* OutViewOrigin, struct FMatrix* OutViewRotationMatrix, struct FMatrix* OutProjectionMatrix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FantasticPerspectiveComponent", "Apply");

	Params::FantasticPerspectiveComponent_Apply Parms{};

	Parms.PlayerController = PlayerController;
	Parms.StereoPass = StereoPass;
	Parms.ViewOrigin = std::move(ViewOrigin);
	Parms.ViewRotationMatrix = std::move(ViewRotationMatrix);
	Parms.ProjectionMatrix = std::move(ProjectionMatrix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutViewOrigin != nullptr)
		*OutViewOrigin = Parms.OutViewOrigin;

	if (OutViewRotationMatrix != nullptr)
		*OutViewRotationMatrix = Parms.OutViewRotationMatrix;

	if (OutProjectionMatrix != nullptr)
		*OutProjectionMatrix = Parms.OutProjectionMatrix;

	return Parms.ReturnValue;
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.ApplyFrustumEffects
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFantasticPerspectiveFrustum     Frustum                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ViewOrigin                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          ViewRotationMatrix                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                          ProjectionMatrix                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          OutViewOrigin                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          OutViewRotationMatrix                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                          OutProjectionMatrix                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UFantasticPerspectiveFunctions::ApplyFrustumEffects(const struct FFantasticPerspectiveFrustum& Frustum, const struct FVector& ViewOrigin, const struct FMatrix& ViewRotationMatrix, const struct FMatrix& ProjectionMatrix, struct FVector* OutViewOrigin, struct FMatrix* OutViewRotationMatrix, struct FMatrix* OutProjectionMatrix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "ApplyFrustumEffects");

	Params::FantasticPerspectiveFunctions_ApplyFrustumEffects Parms{};

	Parms.Frustum = std::move(Frustum);
	Parms.ViewOrigin = std::move(ViewOrigin);
	Parms.ViewRotationMatrix = std::move(ViewRotationMatrix);
	Parms.ProjectionMatrix = std::move(ProjectionMatrix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutViewOrigin != nullptr)
		*OutViewOrigin = Parms.OutViewOrigin;

	if (OutViewRotationMatrix != nullptr)
		*OutViewRotationMatrix = Parms.OutViewRotationMatrix;

	if (OutProjectionMatrix != nullptr)
		*OutProjectionMatrix = Parms.OutProjectionMatrix;
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.ApplyPointsBasing
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFantasticPerspectivePoints      Settings                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ViewOrigin                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          ViewRotationMatrix                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          OutViewOrigin                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          OutViewRotationMatrix                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                          OutProjectionMatrix                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UFantasticPerspectiveFunctions::ApplyPointsBasing(const struct FFantasticPerspectivePoints& Settings, const struct FVector& ViewOrigin, const struct FMatrix& ViewRotationMatrix, struct FVector* OutViewOrigin, struct FMatrix* OutViewRotationMatrix, struct FMatrix* OutProjectionMatrix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "ApplyPointsBasing");

	Params::FantasticPerspectiveFunctions_ApplyPointsBasing Parms{};

	Parms.Settings = std::move(Settings);
	Parms.ViewOrigin = std::move(ViewOrigin);
	Parms.ViewRotationMatrix = std::move(ViewRotationMatrix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutViewOrigin != nullptr)
		*OutViewOrigin = Parms.OutViewOrigin;

	if (OutViewRotationMatrix != nullptr)
		*OutViewRotationMatrix = Parms.OutViewRotationMatrix;

	if (OutProjectionMatrix != nullptr)
		*OutProjectionMatrix = Parms.OutProjectionMatrix;
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.ApplySettings
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFantasticPerspectiveSettings    Settings                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ViewOrigin                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          ViewRotationMatrix                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                          ProjectionMatrix                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          OutViewOrigin                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          OutViewRotationMatrix                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                          OutProjectionMatrix                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UFantasticPerspectiveFunctions::ApplySettings(const struct FFantasticPerspectiveSettings& Settings, const struct FVector& ViewOrigin, const struct FMatrix& ViewRotationMatrix, const struct FMatrix& ProjectionMatrix, struct FVector* OutViewOrigin, struct FMatrix* OutViewRotationMatrix, struct FMatrix* OutProjectionMatrix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "ApplySettings");

	Params::FantasticPerspectiveFunctions_ApplySettings Parms{};

	Parms.Settings = std::move(Settings);
	Parms.ViewOrigin = std::move(ViewOrigin);
	Parms.ViewRotationMatrix = std::move(ViewRotationMatrix);
	Parms.ProjectionMatrix = std::move(ProjectionMatrix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutViewOrigin != nullptr)
		*OutViewOrigin = Parms.OutViewOrigin;

	if (OutViewRotationMatrix != nullptr)
		*OutViewRotationMatrix = Parms.OutViewRotationMatrix;

	if (OutProjectionMatrix != nullptr)
		*OutProjectionMatrix = Parms.OutProjectionMatrix;
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.ApplySettingsAndDrawDebug
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFantasticPerspectiveSettings    Settings                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ViewOrigin                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          ViewRotationMatrix                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                          ProjectionMatrix                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          OutViewOrigin                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          OutViewRotationMatrix                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                          OutProjectionMatrix                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UFantasticPerspectiveFunctions::ApplySettingsAndDrawDebug(class UObject* WorldContextObject, const struct FFantasticPerspectiveSettings& Settings, const struct FVector& ViewOrigin, const struct FMatrix& ViewRotationMatrix, const struct FMatrix& ProjectionMatrix, struct FVector* OutViewOrigin, struct FMatrix* OutViewRotationMatrix, struct FMatrix* OutProjectionMatrix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "ApplySettingsAndDrawDebug");

	Params::FantasticPerspectiveFunctions_ApplySettingsAndDrawDebug Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Settings = std::move(Settings);
	Parms.ViewOrigin = std::move(ViewOrigin);
	Parms.ViewRotationMatrix = std::move(ViewRotationMatrix);
	Parms.ProjectionMatrix = std::move(ProjectionMatrix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutViewOrigin != nullptr)
		*OutViewOrigin = Parms.OutViewOrigin;

	if (OutViewRotationMatrix != nullptr)
		*OutViewRotationMatrix = Parms.OutViewRotationMatrix;

	if (OutProjectionMatrix != nullptr)
		*OutProjectionMatrix = Parms.OutProjectionMatrix;
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.ApplyToSceneCapture2D
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneCaptureComponent2D*         SceneCapture                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ViewOrigin                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          ViewRotationMatrix                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                          ProjectionMatrix                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UFantasticPerspectiveFunctions::ApplyToSceneCapture2D(class USceneCaptureComponent2D* SceneCapture, struct FVector& ViewOrigin, struct FMatrix& ViewRotationMatrix, struct FMatrix& ProjectionMatrix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "ApplyToSceneCapture2D");

	Params::FantasticPerspectiveFunctions_ApplyToSceneCapture2D Parms{};

	Parms.SceneCapture = SceneCapture;
	Parms.ViewOrigin = std::move(ViewOrigin);
	Parms.ViewRotationMatrix = std::move(ViewRotationMatrix);
	Parms.ProjectionMatrix = std::move(ProjectionMatrix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.ApplyTransformEffects
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFantasticPerspectiveTransform   Transform                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ViewOrigin                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          ViewRotationMatrix                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          OutViewOrigin                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          OutViewRotationMatrix                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UFantasticPerspectiveFunctions::ApplyTransformEffects(const struct FFantasticPerspectiveTransform& Transform, const struct FVector& ViewOrigin, const struct FMatrix& ViewRotationMatrix, struct FVector* OutViewOrigin, struct FMatrix* OutViewRotationMatrix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "ApplyTransformEffects");

	Params::FantasticPerspectiveFunctions_ApplyTransformEffects Parms{};

	Parms.Transform = std::move(Transform);
	Parms.ViewOrigin = std::move(ViewOrigin);
	Parms.ViewRotationMatrix = std::move(ViewRotationMatrix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutViewOrigin != nullptr)
		*OutViewOrigin = Parms.OutViewOrigin;

	if (OutViewRotationMatrix != nullptr)
		*OutViewRotationMatrix = Parms.OutViewRotationMatrix;
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.DrawDebugPositionedFrustum
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ViewOrigin                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          ViewRotationMatrix                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FMatrix                          ProjectionMatrix                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PerspectiveFrustumDepth                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPersistentLines                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LifeTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   DepthPriority                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFantasticPerspectiveFunctions::DrawDebugPositionedFrustum(class UObject* WorldContextObject, struct FVector& ViewOrigin, struct FMatrix& ViewRotationMatrix, struct FMatrix& ProjectionMatrix, const struct FLinearColor& Color, float PerspectiveFrustumDepth, bool bPersistentLines, float LifeTime, uint8 DepthPriority, float Thickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "DrawDebugPositionedFrustum");

	Params::FantasticPerspectiveFunctions_DrawDebugPositionedFrustum Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ViewOrigin = std::move(ViewOrigin);
	Parms.ViewRotationMatrix = std::move(ViewRotationMatrix);
	Parms.ProjectionMatrix = std::move(ProjectionMatrix);
	Parms.Color = std::move(Color);
	Parms.PerspectiveFrustumDepth = PerspectiveFrustumDepth;
	Parms.bPersistentLines = bPersistentLines;
	Parms.LifeTime = LifeTime;
	Parms.DepthPriority = DepthPriority;
	Parms.Thickness = Thickness;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.GetDebugSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFantasticPerspectiveSettings    Target                                                 (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FFantasticPerspectiveDebug ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FFantasticPerspectiveDebug UFantasticPerspectiveFunctions::GetDebugSettings(struct FFantasticPerspectiveSettings& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "GetDebugSettings");

	Params::FantasticPerspectiveFunctions_GetDebugSettings Parms{};

	Parms.Target = std::move(Target);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.GetFrustumSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFantasticPerspectiveSettings    Target                                                 (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FFantasticPerspectiveFrustumReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FFantasticPerspectiveFrustum UFantasticPerspectiveFunctions::GetFrustumSettings(struct FFantasticPerspectiveSettings& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "GetFrustumSettings");

	Params::FantasticPerspectiveFunctions_GetFrustumSettings Parms{};

	Parms.Target = std::move(Target);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.GetTransformSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFantasticPerspectiveSettings    Target                                                 (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FFantasticPerspectiveTransformReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FFantasticPerspectiveTransform UFantasticPerspectiveFunctions::GetTransformSettings(struct FFantasticPerspectiveSettings& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "GetTransformSettings");

	Params::FantasticPerspectiveFunctions_GetTransformSettings Parms{};

	Parms.Target = std::move(Target);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.ResetCache
// (Final, Native, Static, Public, BlueprintCallable)

void UFantasticPerspectiveFunctions::ResetCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "ResetCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.ResetSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFantasticPerspectiveSettings    Target                                                 (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UFantasticPerspectiveFunctions::ResetSettings(struct FFantasticPerspectiveSettings& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "ResetSettings");

	Params::FantasticPerspectiveFunctions_ResetSettings Parms{};

	Parms.Target = std::move(Target);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Target = std::move(Parms.Target);
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.ScreenToWorldConversionMatrix
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMatrix                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMatrix UFantasticPerspectiveFunctions::ScreenToWorldConversionMatrix()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "ScreenToWorldConversionMatrix");

	Params::FantasticPerspectiveFunctions_ScreenToWorldConversionMatrix Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.ScreenToWorldConversionRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UFantasticPerspectiveFunctions::ScreenToWorldConversionRotator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "ScreenToWorldConversionRotator");

	Params::FantasticPerspectiveFunctions_ScreenToWorldConversionRotator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.SetDebugSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFantasticPerspectiveSettings    Target                                                 (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FFantasticPerspectiveDebug       Debug                                                  (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void UFantasticPerspectiveFunctions::SetDebugSettings(struct FFantasticPerspectiveSettings& Target, struct FFantasticPerspectiveDebug& Debug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "SetDebugSettings");

	Params::FantasticPerspectiveFunctions_SetDebugSettings Parms{};

	Parms.Target = std::move(Target);
	Parms.Debug = std::move(Debug);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Target = std::move(Parms.Target);
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.SetFrustumSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFantasticPerspectiveSettings    Target                                                 (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FFantasticPerspectiveFrustum     Frustum                                                (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void UFantasticPerspectiveFunctions::SetFrustumSettings(struct FFantasticPerspectiveSettings& Target, struct FFantasticPerspectiveFrustum& Frustum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "SetFrustumSettings");

	Params::FantasticPerspectiveFunctions_SetFrustumSettings Parms{};

	Parms.Target = std::move(Target);
	Parms.Frustum = std::move(Frustum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Target = std::move(Parms.Target);
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.SetTransformSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFantasticPerspectiveSettings    Target                                                 (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FFantasticPerspectiveTransform   Transform                                              (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void UFantasticPerspectiveFunctions::SetTransformSettings(struct FFantasticPerspectiveSettings& Target, struct FFantasticPerspectiveTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "SetTransformSettings");

	Params::FantasticPerspectiveFunctions_SetTransformSettings Parms{};

	Parms.Target = std::move(Target);
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Target = std::move(Parms.Target);
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.WorldToScreenConversionMatrix
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMatrix                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMatrix UFantasticPerspectiveFunctions::WorldToScreenConversionMatrix()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "WorldToScreenConversionMatrix");

	Params::FantasticPerspectiveFunctions_WorldToScreenConversionMatrix Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FantasticPerspectivePlugin.FantasticPerspectiveFunctions.WorldToScreenConversionRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UFantasticPerspectiveFunctions::WorldToScreenConversionRotator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FantasticPerspectiveFunctions", "WorldToScreenConversionRotator");

	Params::FantasticPerspectiveFunctions_WorldToScreenConversionRotator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

