#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TimeManagement

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class TimeManagement.FixedFrameRateCustomTimeStep
// 0x0008 (0x0030 - 0x0028)
class UFixedFrameRateCustomTimeStep final  : public UEngineCustomTimeStep
{
public:
	struct FFrameRate                             FixedFrameRate;                                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FixedFrameRateCustomTimeStep">();
	}
	static class UFixedFrameRateCustomTimeStep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFixedFrameRateCustomTimeStep>();
	}
};

// Class TimeManagement.TimeManagementBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UTimeManagementBlueprintLibrary final  : public UBlueprintFunctionLibrary
{
public:
	static struct FFrameNumber Add_FrameNumberFrameNumber(const struct FFrameNumber& A, const struct FFrameNumber& B);
	static struct FFrameNumber Add_FrameNumberInteger(const struct FFrameNumber& A, int32 B);
	static int32 Conv_FrameNumberToInteger(struct FFrameNumber& InFrameNumber);
	static float Conv_FrameRateToSeconds(struct FFrameRate& InFrameRate);
	static float Conv_QualifiedFrameTimeToSeconds(struct FQualifiedFrameTime& InFrameTime);
	static class FString Conv_TimecodeToString(struct FTimecode& InTimecode, bool bForceSignDisplay);
	static struct FFrameNumber Divide_FrameNumberInteger(const struct FFrameNumber& A, int32 B);
	static struct FTimecode GetTimecode();
	static struct FFrameRate GetTimecodeFrameRate();
	static bool IsValid_Framerate(struct FFrameRate& InFrameRate);
	static bool IsValid_MultipleOf(struct FFrameRate& InFrameRate, struct FFrameRate& OtherFramerate);
	static struct FFrameNumber Multiply_FrameNumberInteger(const struct FFrameNumber& A, int32 B);
	static struct FFrameTime Multiply_SecondsFrameRate(float TimeInSeconds, struct FFrameRate& FrameRate);
	static struct FFrameTime SnapFrameTimeToRate(struct FFrameTime& SourceTime, struct FFrameRate& SourceRate, struct FFrameRate& SnapToRate);
	static struct FFrameNumber Subtract_FrameNumberFrameNumber(const struct FFrameNumber& A, const struct FFrameNumber& B);
	static struct FFrameNumber Subtract_FrameNumberInteger(const struct FFrameNumber& A, int32 B);
	static struct FFrameTime TransformTime(struct FFrameTime& SourceTime, struct FFrameRate& SourceRate, struct FFrameRate& DestinationRate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeManagementBlueprintLibrary">();
	}
	static class UTimeManagementBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeManagementBlueprintLibrary>();
	}
};

// Class TimeManagement.TimeSynchronizationSource
// 0x0008 (0x0030 - 0x0028)
class UTimeSynchronizationSource final  : public UObject
{
public:
	bool                                          bUseForSynchronization;                            // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136C[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FrameOffset;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TimeSynchronizationSource">();
	}
	static class UTimeSynchronizationSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeSynchronizationSource>();
	}
};

}

